name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: test
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            artifact-name: windows
          - os: macos-latest
            runtime: osx-x64
            artifact-name: macos-intel
          - os: macos-latest
            runtime: osx-arm64
            artifact-name: macos-arm64
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: linux
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Get version
      id: version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="1.0.0-dev.${GITHUB_SHA::8}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Publish
      run: |
        dotnet publish src/CircularMidiGenerator \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output dist/${{ matrix.runtime }} \
          --no-restore \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:Version=${{ steps.version.outputs.version }} \
          -p:AssemblyVersion=${{ steps.version.outputs.version }} \
          -p:FileVersion=${{ steps.version.outputs.version }}
    
    - name: Create package (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $archiveName = "CircularMidiGenerator-${{ steps.version.outputs.version }}-${{ matrix.artifact-name }}.zip"
        Compress-Archive -Path "dist/${{ matrix.runtime }}/*" -DestinationPath $archiveName
        echo "PACKAGE_NAME=$archiveName" >> $env:GITHUB_ENV
        
    - name: Create package (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd dist/${{ matrix.runtime }}
        if [[ "${{ matrix.runtime }}" == "linux-x64" ]]; then
          ARCHIVE_NAME="CircularMidiGenerator-${{ steps.version.outputs.version }}-${{ matrix.artifact-name }}.tar.gz"
          tar -czf "../../$ARCHIVE_NAME" ./*
        else
          ARCHIVE_NAME="CircularMidiGenerator-${{ steps.version.outputs.version }}-${{ matrix.artifact-name }}.zip"
          zip -r "../../$ARCHIVE_NAME" ./*
        fi
        echo "PACKAGE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        
    - name: Generate checksum
      shell: bash
      run: |
        if command -v sha256sum &> /dev/null; then
          sha256sum "$PACKAGE_NAME" > "$PACKAGE_NAME.sha256"
        elif command -v shasum &> /dev/null; then
          shasum -a 256 "$PACKAGE_NAME" > "$PACKAGE_NAME.sha256"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          ${{ env.PACKAGE_NAME }}
          ${{ env.PACKAGE_NAME }}.sha256
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.zip" -o -name "*.tar.gz" -o -name "*.sha256" | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/
        
    - name: Generate release notes
      id: release-notes
      run: |
        cat > release-notes.md << 'EOF'
        ## Circular MIDI Generator v${{ steps.version.outputs.version }}
        
        ### 🎵 Features
        - Innovative circular interface for MIDI pattern creation
        - Real-time marker triggering with visual feedback
        - Multi-lane support with independent MIDI channels
        - Quantization grid with musical divisions
        - Ableton Live synchronization
        - Multi-touch and gesture support
        - Project save/load with crash recovery
        - Cross-platform support (Windows, macOS, Linux)
        
        ### 📦 Downloads
        
        Choose the appropriate package for your platform:
        
        - **Windows**: `CircularMidiGenerator-${{ steps.version.outputs.version }}-windows.zip`
        - **macOS Intel**: `CircularMidiGenerator-${{ steps.version.outputs.version }}-macos-intel.zip`
        - **macOS Apple Silicon**: `CircularMidiGenerator-${{ steps.version.outputs.version }}-macos-arm64.zip`
        - **Linux**: `CircularMidiGenerator-${{ steps.version.outputs.version }}-linux.tar.gz`
        
        ### 🔐 Verification
        
        SHA256 checksums are provided for each package. Verify your download:
        
        ```bash
        # Windows (PowerShell)
        Get-FileHash CircularMidiGenerator-${{ steps.version.outputs.version }}-windows.zip
        
        # macOS/Linux
        sha256sum CircularMidiGenerator-${{ steps.version.outputs.version }}-linux.tar.gz
        ```
        
        ### 📚 Documentation
        
        - [Getting Started Guide](https://github.com/user/circular-midi-generator/blob/main/docs/getting-started.md)
        - [User Manual](https://github.com/user/circular-midi-generator/blob/main/docs/README.md)
        - [MIDI Setup Guide](https://github.com/user/circular-midi-generator/blob/main/docs/midi-setup.md)
        
        ### 🐛 Known Issues
        
        - First launch may be slow due to .NET runtime initialization
        - Some antivirus software may flag the executable (false positive)
        - macOS users may need to allow the app in Security & Privacy settings
        
        ### 💬 Support
        
        - [GitHub Discussions](https://github.com/user/circular-midi-generator/discussions) for questions
        - [GitHub Issues](https://github.com/user/circular-midi-generator/issues) for bug reports
        - Email: support@circularmidi.com
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Circular MIDI Generator v${{ steps.version.outputs.version }}
        body_path: release-notes.md
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ Build completed successfully!"
        echo "All tests passed and packages were created."
        
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Build failed!"
        echo "Check the logs for details."
        exit 1